// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package galiaslookupproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AliasLookupClient is the client API for AliasLookup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AliasLookupClient interface {
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	PrimaryAlias(ctx context.Context, in *PrimaryAliasRequest, opts ...grpc.CallOption) (*PrimaryAliasResponse, error)
}

type aliasLookupClient struct {
	cc grpc.ClientConnInterface
}

func NewAliasLookupClient(cc grpc.ClientConnInterface) AliasLookupClient {
	return &aliasLookupClient{cc}
}

func (c *aliasLookupClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/galiaslookupproto.AliasLookup/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasLookupClient) PrimaryAlias(ctx context.Context, in *PrimaryAliasRequest, opts ...grpc.CallOption) (*PrimaryAliasResponse, error) {
	out := new(PrimaryAliasResponse)
	err := c.cc.Invoke(ctx, "/galiaslookupproto.AliasLookup/PrimaryAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AliasLookupServer is the server API for AliasLookup service.
// All implementations must embed UnimplementedAliasLookupServer
// for forward compatibility
type AliasLookupServer interface {
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	PrimaryAlias(context.Context, *PrimaryAliasRequest) (*PrimaryAliasResponse, error)
	mustEmbedUnimplementedAliasLookupServer()
}

// UnimplementedAliasLookupServer must be embedded to have forward compatible implementations.
type UnimplementedAliasLookupServer struct {
}

func (UnimplementedAliasLookupServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedAliasLookupServer) PrimaryAlias(context.Context, *PrimaryAliasRequest) (*PrimaryAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrimaryAlias not implemented")
}
func (UnimplementedAliasLookupServer) mustEmbedUnimplementedAliasLookupServer() {}

// UnsafeAliasLookupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AliasLookupServer will
// result in compilation errors.
type UnsafeAliasLookupServer interface {
	mustEmbedUnimplementedAliasLookupServer()
}

func RegisterAliasLookupServer(s grpc.ServiceRegistrar, srv AliasLookupServer) {
	s.RegisterService(&AliasLookup_ServiceDesc, srv)
}

func _AliasLookup_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasLookupServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galiaslookupproto.AliasLookup/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasLookupServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasLookup_PrimaryAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasLookupServer).PrimaryAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galiaslookupproto.AliasLookup/PrimaryAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasLookupServer).PrimaryAlias(ctx, req.(*PrimaryAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AliasLookup_ServiceDesc is the grpc.ServiceDesc for AliasLookup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AliasLookup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "galiaslookupproto.AliasLookup",
	HandlerType: (*AliasLookupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _AliasLookup_Lookup_Handler,
		},
		{
			MethodName: "PrimaryAlias",
			Handler:    _AliasLookup_PrimaryAlias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "galiaslookup.proto",
}
